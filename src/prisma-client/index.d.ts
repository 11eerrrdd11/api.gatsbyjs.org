// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  contributor: (where?: ContributorWhereInput) => Promise<boolean>;
  feedback: (where?: FeedbackWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  contributor: (
    where: ContributorWhereUniqueInput
  ) => ContributorNullablePromise;
  contributors: (args?: {
    where?: ContributorWhereInput;
    orderBy?: ContributorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Contributor>;
  contributorsConnection: (args?: {
    where?: ContributorWhereInput;
    orderBy?: ContributorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ContributorConnectionPromise;
  feedback: (where: FeedbackWhereUniqueInput) => FeedbackNullablePromise;
  feedbacks: (args?: {
    where?: FeedbackWhereInput;
    orderBy?: FeedbackOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Feedback>;
  feedbacksConnection: (args?: {
    where?: FeedbackWhereInput;
    orderBy?: FeedbackOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FeedbackConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createContributor: (data: ContributorCreateInput) => ContributorPromise;
  updateContributor: (args: {
    data: ContributorUpdateInput;
    where: ContributorWhereUniqueInput;
  }) => ContributorPromise;
  updateManyContributors: (args: {
    data: ContributorUpdateManyMutationInput;
    where?: ContributorWhereInput;
  }) => BatchPayloadPromise;
  upsertContributor: (args: {
    where: ContributorWhereUniqueInput;
    create: ContributorCreateInput;
    update: ContributorUpdateInput;
  }) => ContributorPromise;
  deleteContributor: (where: ContributorWhereUniqueInput) => ContributorPromise;
  deleteManyContributors: (
    where?: ContributorWhereInput
  ) => BatchPayloadPromise;
  createFeedback: (data: FeedbackCreateInput) => FeedbackPromise;
  updateFeedback: (args: {
    data: FeedbackUpdateInput;
    where: FeedbackWhereUniqueInput;
  }) => FeedbackPromise;
  updateManyFeedbacks: (args: {
    data: FeedbackUpdateManyMutationInput;
    where?: FeedbackWhereInput;
  }) => BatchPayloadPromise;
  upsertFeedback: (args: {
    where: FeedbackWhereUniqueInput;
    create: FeedbackCreateInput;
    update: FeedbackUpdateInput;
  }) => FeedbackPromise;
  deleteFeedback: (where: FeedbackWhereUniqueInput) => FeedbackPromise;
  deleteManyFeedbacks: (where?: FeedbackWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  contributor: (
    where?: ContributorSubscriptionWhereInput
  ) => ContributorSubscriptionPayloadSubscription;
  feedback: (
    where?: FeedbackSubscriptionWhereInput
  ) => FeedbackSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ContributorOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "email_ASC"
  | "email_DESC"
  | "githubUsername_ASC"
  | "githubUsername_DESC"
  | "shopifyCustomerID_ASC"
  | "shopifyCustomerID_DESC";

export type FeedbackStatus = "OPEN" | "CLOSED";

export type FeedbackOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "rating_ASC"
  | "rating_DESC"
  | "comment_ASC"
  | "comment_DESC"
  | "originUrl_ASC"
  | "originUrl_DESC"
  | "status_ASC"
  | "status_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ContributorWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  githubUsername?: Maybe<String>;
  shopifyCustomerID?: Maybe<String>;
}>;

export interface ContributorWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  githubUsername?: Maybe<String>;
  githubUsername_not?: Maybe<String>;
  githubUsername_in?: Maybe<String[] | String>;
  githubUsername_not_in?: Maybe<String[] | String>;
  githubUsername_lt?: Maybe<String>;
  githubUsername_lte?: Maybe<String>;
  githubUsername_gt?: Maybe<String>;
  githubUsername_gte?: Maybe<String>;
  githubUsername_contains?: Maybe<String>;
  githubUsername_not_contains?: Maybe<String>;
  githubUsername_starts_with?: Maybe<String>;
  githubUsername_not_starts_with?: Maybe<String>;
  githubUsername_ends_with?: Maybe<String>;
  githubUsername_not_ends_with?: Maybe<String>;
  shopifyCustomerID?: Maybe<String>;
  shopifyCustomerID_not?: Maybe<String>;
  shopifyCustomerID_in?: Maybe<String[] | String>;
  shopifyCustomerID_not_in?: Maybe<String[] | String>;
  shopifyCustomerID_lt?: Maybe<String>;
  shopifyCustomerID_lte?: Maybe<String>;
  shopifyCustomerID_gt?: Maybe<String>;
  shopifyCustomerID_gte?: Maybe<String>;
  shopifyCustomerID_contains?: Maybe<String>;
  shopifyCustomerID_not_contains?: Maybe<String>;
  shopifyCustomerID_starts_with?: Maybe<String>;
  shopifyCustomerID_not_starts_with?: Maybe<String>;
  shopifyCustomerID_ends_with?: Maybe<String>;
  shopifyCustomerID_not_ends_with?: Maybe<String>;
  AND?: Maybe<ContributorWhereInput[] | ContributorWhereInput>;
  OR?: Maybe<ContributorWhereInput[] | ContributorWhereInput>;
  NOT?: Maybe<ContributorWhereInput[] | ContributorWhereInput>;
}

export type FeedbackWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface FeedbackWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  rating?: Maybe<Int>;
  rating_not?: Maybe<Int>;
  rating_in?: Maybe<Int[] | Int>;
  rating_not_in?: Maybe<Int[] | Int>;
  rating_lt?: Maybe<Int>;
  rating_lte?: Maybe<Int>;
  rating_gt?: Maybe<Int>;
  rating_gte?: Maybe<Int>;
  comment?: Maybe<String>;
  comment_not?: Maybe<String>;
  comment_in?: Maybe<String[] | String>;
  comment_not_in?: Maybe<String[] | String>;
  comment_lt?: Maybe<String>;
  comment_lte?: Maybe<String>;
  comment_gt?: Maybe<String>;
  comment_gte?: Maybe<String>;
  comment_contains?: Maybe<String>;
  comment_not_contains?: Maybe<String>;
  comment_starts_with?: Maybe<String>;
  comment_not_starts_with?: Maybe<String>;
  comment_ends_with?: Maybe<String>;
  comment_not_ends_with?: Maybe<String>;
  originUrl?: Maybe<String>;
  originUrl_not?: Maybe<String>;
  originUrl_in?: Maybe<String[] | String>;
  originUrl_not_in?: Maybe<String[] | String>;
  originUrl_lt?: Maybe<String>;
  originUrl_lte?: Maybe<String>;
  originUrl_gt?: Maybe<String>;
  originUrl_gte?: Maybe<String>;
  originUrl_contains?: Maybe<String>;
  originUrl_not_contains?: Maybe<String>;
  originUrl_starts_with?: Maybe<String>;
  originUrl_not_starts_with?: Maybe<String>;
  originUrl_ends_with?: Maybe<String>;
  originUrl_not_ends_with?: Maybe<String>;
  status?: Maybe<FeedbackStatus>;
  status_not?: Maybe<FeedbackStatus>;
  status_in?: Maybe<FeedbackStatus[] | FeedbackStatus>;
  status_not_in?: Maybe<FeedbackStatus[] | FeedbackStatus>;
  AND?: Maybe<FeedbackWhereInput[] | FeedbackWhereInput>;
  OR?: Maybe<FeedbackWhereInput[] | FeedbackWhereInput>;
  NOT?: Maybe<FeedbackWhereInput[] | FeedbackWhereInput>;
}

export interface ContributorCreateInput {
  id?: Maybe<ID_Input>;
  email?: Maybe<String>;
  githubUsername: String;
  shopifyCustomerID?: Maybe<String>;
}

export interface ContributorUpdateInput {
  email?: Maybe<String>;
  githubUsername?: Maybe<String>;
  shopifyCustomerID?: Maybe<String>;
}

export interface ContributorUpdateManyMutationInput {
  email?: Maybe<String>;
  githubUsername?: Maybe<String>;
  shopifyCustomerID?: Maybe<String>;
}

export interface FeedbackCreateInput {
  id?: Maybe<ID_Input>;
  rating: Int;
  comment?: Maybe<String>;
  originUrl: String;
  status?: Maybe<FeedbackStatus>;
}

export interface FeedbackUpdateInput {
  rating?: Maybe<Int>;
  comment?: Maybe<String>;
  originUrl?: Maybe<String>;
  status?: Maybe<FeedbackStatus>;
}

export interface FeedbackUpdateManyMutationInput {
  rating?: Maybe<Int>;
  comment?: Maybe<String>;
  originUrl?: Maybe<String>;
  status?: Maybe<FeedbackStatus>;
}

export interface ContributorSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ContributorWhereInput>;
  AND?: Maybe<
    ContributorSubscriptionWhereInput[] | ContributorSubscriptionWhereInput
  >;
  OR?: Maybe<
    ContributorSubscriptionWhereInput[] | ContributorSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ContributorSubscriptionWhereInput[] | ContributorSubscriptionWhereInput
  >;
}

export interface FeedbackSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FeedbackWhereInput>;
  AND?: Maybe<
    FeedbackSubscriptionWhereInput[] | FeedbackSubscriptionWhereInput
  >;
  OR?: Maybe<FeedbackSubscriptionWhereInput[] | FeedbackSubscriptionWhereInput>;
  NOT?: Maybe<
    FeedbackSubscriptionWhereInput[] | FeedbackSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Contributor {
  id: ID_Output;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  email?: String;
  githubUsername: String;
  shopifyCustomerID?: String;
}

export interface ContributorPromise extends Promise<Contributor>, Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  githubUsername: () => Promise<String>;
  shopifyCustomerID: () => Promise<String>;
}

export interface ContributorSubscription
  extends Promise<AsyncIterator<Contributor>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  githubUsername: () => Promise<AsyncIterator<String>>;
  shopifyCustomerID: () => Promise<AsyncIterator<String>>;
}

export interface ContributorNullablePromise
  extends Promise<Contributor | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  githubUsername: () => Promise<String>;
  shopifyCustomerID: () => Promise<String>;
}

export interface ContributorConnection {
  pageInfo: PageInfo;
  edges: ContributorEdge[];
}

export interface ContributorConnectionPromise
  extends Promise<ContributorConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ContributorEdge>>() => T;
  aggregate: <T = AggregateContributorPromise>() => T;
}

export interface ContributorConnectionSubscription
  extends Promise<AsyncIterator<ContributorConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ContributorEdgeSubscription>>>() => T;
  aggregate: <T = AggregateContributorSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ContributorEdge {
  node: Contributor;
  cursor: String;
}

export interface ContributorEdgePromise
  extends Promise<ContributorEdge>,
    Fragmentable {
  node: <T = ContributorPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ContributorEdgeSubscription
  extends Promise<AsyncIterator<ContributorEdge>>,
    Fragmentable {
  node: <T = ContributorSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateContributor {
  count: Int;
}

export interface AggregateContributorPromise
  extends Promise<AggregateContributor>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateContributorSubscription
  extends Promise<AsyncIterator<AggregateContributor>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Feedback {
  id: ID_Output;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  rating: Int;
  comment?: String;
  originUrl: String;
  status: FeedbackStatus;
}

export interface FeedbackPromise extends Promise<Feedback>, Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  rating: () => Promise<Int>;
  comment: () => Promise<String>;
  originUrl: () => Promise<String>;
  status: () => Promise<FeedbackStatus>;
}

export interface FeedbackSubscription
  extends Promise<AsyncIterator<Feedback>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  rating: () => Promise<AsyncIterator<Int>>;
  comment: () => Promise<AsyncIterator<String>>;
  originUrl: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<FeedbackStatus>>;
}

export interface FeedbackNullablePromise
  extends Promise<Feedback | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  rating: () => Promise<Int>;
  comment: () => Promise<String>;
  originUrl: () => Promise<String>;
  status: () => Promise<FeedbackStatus>;
}

export interface FeedbackConnection {
  pageInfo: PageInfo;
  edges: FeedbackEdge[];
}

export interface FeedbackConnectionPromise
  extends Promise<FeedbackConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FeedbackEdge>>() => T;
  aggregate: <T = AggregateFeedbackPromise>() => T;
}

export interface FeedbackConnectionSubscription
  extends Promise<AsyncIterator<FeedbackConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FeedbackEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFeedbackSubscription>() => T;
}

export interface FeedbackEdge {
  node: Feedback;
  cursor: String;
}

export interface FeedbackEdgePromise
  extends Promise<FeedbackEdge>,
    Fragmentable {
  node: <T = FeedbackPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FeedbackEdgeSubscription
  extends Promise<AsyncIterator<FeedbackEdge>>,
    Fragmentable {
  node: <T = FeedbackSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFeedback {
  count: Int;
}

export interface AggregateFeedbackPromise
  extends Promise<AggregateFeedback>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFeedbackSubscription
  extends Promise<AsyncIterator<AggregateFeedback>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ContributorSubscriptionPayload {
  mutation: MutationType;
  node: Contributor;
  updatedFields: String[];
  previousValues: ContributorPreviousValues;
}

export interface ContributorSubscriptionPayloadPromise
  extends Promise<ContributorSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ContributorPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ContributorPreviousValuesPromise>() => T;
}

export interface ContributorSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ContributorSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ContributorSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ContributorPreviousValuesSubscription>() => T;
}

export interface ContributorPreviousValues {
  id: ID_Output;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  email?: String;
  githubUsername: String;
  shopifyCustomerID?: String;
}

export interface ContributorPreviousValuesPromise
  extends Promise<ContributorPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  githubUsername: () => Promise<String>;
  shopifyCustomerID: () => Promise<String>;
}

export interface ContributorPreviousValuesSubscription
  extends Promise<AsyncIterator<ContributorPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  githubUsername: () => Promise<AsyncIterator<String>>;
  shopifyCustomerID: () => Promise<AsyncIterator<String>>;
}

export interface FeedbackSubscriptionPayload {
  mutation: MutationType;
  node: Feedback;
  updatedFields: String[];
  previousValues: FeedbackPreviousValues;
}

export interface FeedbackSubscriptionPayloadPromise
  extends Promise<FeedbackSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FeedbackPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FeedbackPreviousValuesPromise>() => T;
}

export interface FeedbackSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FeedbackSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FeedbackSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FeedbackPreviousValuesSubscription>() => T;
}

export interface FeedbackPreviousValues {
  id: ID_Output;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  rating: Int;
  comment?: String;
  originUrl: String;
  status: FeedbackStatus;
}

export interface FeedbackPreviousValuesPromise
  extends Promise<FeedbackPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  rating: () => Promise<Int>;
  comment: () => Promise<String>;
  originUrl: () => Promise<String>;
  status: () => Promise<FeedbackStatus>;
}

export interface FeedbackPreviousValuesSubscription
  extends Promise<AsyncIterator<FeedbackPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  rating: () => Promise<AsyncIterator<Int>>;
  comment: () => Promise<AsyncIterator<String>>;
  originUrl: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<FeedbackStatus>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Contributor",
    embedded: false
  },
  {
    name: "Feedback",
    embedded: false
  },
  {
    name: "FeedbackStatus",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
